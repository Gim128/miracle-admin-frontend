/**
 * *** NOTE ON IMPORTING FROM ANGULAR AND NGUNIVERSAL IN THIS FILE ***
 *
 * If your application uses third-party dependencies, you'll need to
 * either use Webpack or the Angular CLI's `bundleDependencies` feature
 * in order to adequately package them for use on the server without a
 * node_modules directory.
 *
 * However, due to the nature of the CLI's `bundleDependencies`, importing
 * Angular in this file will create a different instance of Angular than
 * the version in the compiled application code. This leads to unavoidable
 * conflicts. Therefore, please do not explicitly import from @angular or
 * @nguniversal in this file. You can export any needed resources
 * from your application's main.server.ts file, as seen below with the
 * import for `ngExpressEngine`.
 */

import 'zone.js/dist/zone-node';

import * as express from 'express';
import {join} from 'path';
import {StaticConfig} from './src/app/app-static-config';

const fs = require('fs');

// Express server
const app = express();

const DIST_FOLDER = join(process.cwd(), 'dist');

// * NOTE :: leave this as require() since this file is built Dynamically from webpack
const {AppServerModuleNgFactory, LAZY_MODULE_MAP, ngExpressEngine, provideModuleMap} = require('./dist/server/main');

fs.readFile('web-app.config.json', 'utf8', (err, json) => {
  let webAppConfig: any = null;
  if (err) {
    console.error(err);
    return false;
  } else {
    webAppConfig = JSON.parse(json);
  }

  const PORT = process.env.PORT || webAppConfig.SERVER.PORT;

  app.engine('html', ngExpressEngine({
    bootstrap: AppServerModuleNgFactory,
    providers: [
      provideModuleMap(LAZY_MODULE_MAP)
    ]
  }));

  app.set('view engine', 'html');
  app.set('views', join(DIST_FOLDER, 'browser'));

  app.get('/health', (req, res) => {
    res.status(200);
    res.send('OK');
    res.end();
  });

  // Server static files from /browser
  app.get('*.*', express.static(join(DIST_FOLDER, 'browser')));

  // check language code.
  app.get('/', (req: any, res, next) => {
    if (req.path === '/') {
      res.writeHead(302, {Location: '/' + webAppConfig.LANGUAGE});
      res.end();
    } else {
      next();
    }
  });

  app.get('/:lan*', (req, res, next) => {
    webAppConfig.LANGUAGE = webAppConfig.DEFAULT_LANGUAGE || 'en';
    if (req.params.lan && StaticConfig.lanMap[req.params.lan]) {
      const lanCodeList = StaticConfig.lanCodeList;
      if (lanCodeList.indexOf(StaticConfig.lanMap[req.params.lan].lanKey) > -1) {
        webAppConfig.LANGUAGE = req.params.lan;
        next();
      } else {
        res.writeHead(302, {Location: '/' + webAppConfig.LANGUAGE});
        res.end();
      }
    } else {
      res.writeHead(302, {Location: '/' + webAppConfig.LANGUAGE});
      res.end();
    }
  });

  // All regular routes use the Universal engine
  app.get('*', (req, res) => {
    res.render('index', {
      req ,
      providers: [{
        provide: '__WEB_APP_CONFIG__',
        useValue: webAppConfig
      }]
    });
  });

  // Start up the Node server
  app.listen(PORT, () => {
    console.log(`Node server listening on http://localhost:${PORT}`);
  });

});
